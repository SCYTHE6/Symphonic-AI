{"id":"u59q","dependencies":[{"name":"C:\\Github\\Symphonic-AI\\node_modules\\pixi.js\\lib\\core\\ticker\\index.js.map","includedInParent":true,"mtime":1674916213056},{"name":"C:\\Github\\Symphonic-AI\\package.json","includedInParent":true,"mtime":1724703272135},{"name":"C:\\Github\\Symphonic-AI\\node_modules\\pixi.js\\package.json","includedInParent":true,"mtime":1674916212608},{"name":"./Ticker","loc":{"line":6,"column":22,"index":110},"parent":"C:\\Github\\Symphonic-AI\\node_modules\\pixi.js\\lib\\core\\ticker\\index.js","resolved":"C:\\Github\\Symphonic-AI\\node_modules\\pixi.js\\lib\\core\\ticker\\Ticker.js"}],"generated":{"js":"\"use strict\";exports.__esModule=!0,exports.Ticker=exports.shared=void 0;var e=require(\"./Ticker\"),r=t(e);function t(e){return e&&e.__esModule?e:{default:e}}var o=new r.default;o.autoStart=!0,o.destroy=function(){},exports.shared=o,exports.Ticker=r.default;"},"sourceMaps":{"js":{"mappings":[{"source":"../../../src/core/ticker/index.js","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":72}},{"source":"../../../src/core/ticker/index.js","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":76}},{"source":"../../../src/core/ticker/index.js","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":78}},{"source":"../../../src/core/ticker/index.js","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":86}},{"source":"../../../src/core/ticker/index.js","name":null,"original":{"line":45,"column":0},"generated":{"line":1,"column":156}},{"source":"../../../src/core/ticker/index.js","name":"shared","original":{"line":45,"column":6},"generated":{"line":1,"column":160}},{"source":"../../../src/core/ticker/index.js","name":null,"original":{"line":45,"column":15},"generated":{"line":1,"column":162}},{"source":"../../../src/core/ticker/index.js","name":null,"original":{"line":45,"column":15},"generated":{"line":1,"column":166}},{"source":"../../../src/core/ticker/index.js","name":null,"original":{"line":45,"column":15},"generated":{"line":1,"column":168}},{"source":"../../../src/core/ticker/index.js","name":"shared","original":{"line":47,"column":0},"generated":{"line":1,"column":176}},{"source":"../../../src/core/ticker/index.js","name":"autoStart","original":{"line":47,"column":7},"generated":{"line":1,"column":178}},{"source":"../../../src/core/ticker/index.js","name":null,"original":{"line":47,"column":19},"generated":{"line":1,"column":189}},{"source":"../../../src/core/ticker/index.js","name":"shared","original":{"line":48,"column":0},"generated":{"line":1,"column":191}},{"source":"../../../src/core/ticker/index.js","name":"destroy","original":{"line":48,"column":7},"generated":{"line":1,"column":193}},{"source":"../../../src/core/ticker/index.js","name":null,"original":{"line":48,"column":17},"generated":{"line":1,"column":201}},{"source":"../../../src/core/ticker/index.js","name":"shared","original":{"line":69,"column":9},"generated":{"line":1,"column":222}},{"source":"../../../src/core/ticker/index.js","name":"shared","original":{"line":69,"column":9},"generated":{"line":1,"column":229}},{"source":"../../../src/core/ticker/index.js","name":"Ticker","original":{"line":69,"column":17},"generated":{"line":1,"column":239}}],"sources":{"../../../src/core/ticker/index.js":"import Ticker from './Ticker';\n\n/**\n * The shared ticker instance used by {@link PIXI.extras.AnimatedSprite}.\n * and by {@link PIXI.interaction.InteractionManager}.\n * The property {@link PIXI.ticker.Ticker#autoStart} is set to `true`\n * for this instance. Please follow the examples for usage, including\n * how to opt-out of auto-starting the shared ticker.\n *\n * @example\n * let ticker = PIXI.ticker.shared;\n * // Set this to prevent starting this ticker when listeners are added.\n * // By default this is true only for the PIXI.ticker.shared instance.\n * ticker.autoStart = false;\n * // FYI, call this to ensure the ticker is stopped. It should be stopped\n * // if you have not attempted to render anything yet.\n * ticker.stop();\n * // Call this when you are ready for a running shared ticker.\n * ticker.start();\n *\n * @example\n * // You may use the shared ticker to render...\n * let renderer = PIXI.autoDetectRenderer(800, 600);\n * let stage = new PIXI.Container();\n * let interactionManager = PIXI.interaction.InteractionManager(renderer);\n * document.body.appendChild(renderer.view);\n * ticker.add(function (time) {\n *     renderer.render(stage);\n * });\n *\n * @example\n * // Or you can just update it manually.\n * ticker.autoStart = false;\n * ticker.stop();\n * function animate(time) {\n *     ticker.update(time);\n *     renderer.render(stage);\n *     requestAnimationFrame(animate);\n * }\n * animate(performance.now());\n *\n * @type {PIXI.ticker.Ticker}\n * @memberof PIXI.ticker\n */\nconst shared = new Ticker();\n\nshared.autoStart = true;\nshared.destroy = () =>\n{\n\t// protect destroying shared ticker\n\t// this is used by other internal systems\n\t// like AnimatedSprite and InteractionManager\n};\n\n/**\n * This namespace contains an API for interacting with PIXI's internal global update loop.\n *\n * This ticker is used for rendering, {@link PIXI.extras.AnimatedSprite AnimatedSprite},\n * {@link PIXI.interaction.InteractionManager InteractionManager} and many other time-based PIXI systems.\n * @example\n * const ticker = new PIXI.ticker.Ticker();\n * ticker.stop();\n * ticker.add((deltaTime) => {\n *   // do something every frame\n * });\n * ticker.start();\n * @namespace PIXI.ticker\n */\nexport { shared, Ticker };\n"},"lineCount":null}},"error":null,"hash":"69728ec460a033fd31a7ca81f46c6825","cacheData":{"env":{}}}